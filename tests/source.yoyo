lisp: macro (toks: TokSeq) = {
    lisp_expr := ||(toks: TokSeq) {
        og_size := toks.size();
        if (toks.front().type() == TokenType::LBracket) {
            toks.pop_front();
            op := toks.pop_front();

            left := this(toks);
            right := this(toks);

            toks.pop_or_fail(TokenType::RBracket);
            return BinaryExpr::new(left, op, right);
        } else {
            arr := parse_expr(toks);
            toks.pop_n(arr[1]);
            return arr[0];
        }
    }
    return lisp_expr(toks);
}
print_str_and_int: fn(int: i32, string: str) = {
    test::print(&"${string} and ${int}");
}
main: fn = {
    integer: i32 = 450;
    value := lisp! {
         (+ (* 2 3) (/ integer 10))
    \};
    test::print(&"${value}");
}
