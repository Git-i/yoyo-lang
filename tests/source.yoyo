app: module = APP

//probably implement generic classes/structs soon
gwrap: fn::<T> = {
	Node: struct = {
		data: T,
		next: (^Node)?
	}
	LinkedList: struct = {
		first: (^Node)?,
		new: fn -> This = return This{ .first = null };
		append: fn (&mut this, value: T) = {
			if |val| (this.first) {
				last: mut ^Node = val;
				//implement options as truthy values and break
				should_loop: mut = true;
				while(should_loop) {
					if |nxt| (last.next) last = nxt;
					else should_loop = false;
				}
				last.next = gcnew Node{ .data = value, .next = null };
			} else {
				this.first = gcnew Node{ .data = value, .next = null };
			}
		}
		//temporary crutch
		print_all: fn (&this) = {
			if |val| (this.first) {
				app::func(&"${val.data}");
				last: mut ^Node = val;
				should_loop: mut = true;
				while(should_loop) {
					if |nxt| (last.next) {
						last = nxt;
						app::func(&"${last.data}");
					} else should_loop = false;
				}
			}
		}
	}
	LinkedListIterator: struct:& impl core::Iterator::<&T> = {
		curr: (^Node)?,
		impl core::Iterator::<&T>
		{
			next: fn (&mut this) -> (&T)? = {
				if |node| (this.curr) {
					this.curr = node.next;
					return &node.data;
				}
				else return null;
			}
		}
	}
}
main: fn = {
	a: mut = gwrap::<str>::LinkedList::new();
	b: mut = gwrap::<i32>::LinkedList::new();
	a.append("Hello");
	a.append("World");
	a.append("Stuff");

	b.append(10);
	b.append(20);
	b.append(30);
	b.print_all();
	a.print_all();
}