lisp: macro (toks: TokSeq) = {
    lisp_expr := ||(toks: TokSeq) {
        og_size := toks.size();
        if (toks.front().type() == TokenType::LBracket) {
            toks.pop_front();
            op := toks.pop_front();

            arr := this(toks);
            toks.pop_n(arr[1]);
            left := arr[0];

            rarr := this(toks);
            toks.pop_n(rarr[1]);
            right := rarr[0];

            toks.pop_or_fail(TokenType::RBracket);
            return BinaryExpr::new(left, op, right);
        } else {
            return parse_expr(toks); // [Expr, int]
        }
    }

    toks.pop_or_fail(TokenType::LBracket);
    op := toks.pop_front();

    return BinaryExpr::new(
        lisp_expr(toks),
        op,
        lisp_expr(toks)
    );
}

main: fn = {
    integer: i32 = 450;
    value := lisp! {
        (+ (* 2 3) (/ integer 10))
    \};
    test::print(&"${value}");
}
