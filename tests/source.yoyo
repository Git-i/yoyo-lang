rl: class = {
    Window: struct = {
        init: fn(w: i32, h: i32, title: &str) -> Window = {
            init_window_i: fn(w: i32, h: i32, title: ptr) = c_import!("InitWindow");
            init_window_i(w, h, title.c_str());
            return Window{};
        }
        should_close: fn(&this) -> bool  = {
            should_close_i: fn -> bool = c_import!("WindowShouldClose");
            return should_close_i();
        }
        #(destructor)
        destroy: fn(&mut this) = {
            dst: fn = c_import!("CloseWindow");
            dst();       
        }
    }
    AudioDevice: struct = {
        init: fn -> AudioDevice = {
            init_ad: fn = c_import!("InitAudioDevice");
            init_ad();
            return This{};
        }
        #(destructor)
        destroy: fn(&mut this) = {
            dst: fn = c_import!("CloseAudioDevice");
            dst();
        }
    }
    AudioStream: struct = {
        buffer: ptr,
        processor: ptr,
        sample_rate: u32,
        sample_size: u32,
        channels: u32
    }
    Sound: struct = {
        stream: AudioStream,
        frame_count: u32,

        load: fn(src: &str) -> This = {
            load_sound_i: fn(file: ptr) -> This = c_import!("LoadSound");
            return load_sound_i(src.c_str());
        }
        play: fn(&this) = {
            play_sound: fn(sound: Sound) = c_import!("PlaySound");
            play_sound(*this);
        }
        #(destructor)
        unload: fn(&mut this) = {
            unload_sound: fn(sound: Sound) = c_import!("UnloadSound");
            unload_sound(*this);
        }
    }
    set_target_fps: fn(fps: i32) = c_import!("SetTargetFPS");
    Key: enum = {
        Space = 32, Enter = 257
    }
    begin_drawing: fn = c_import!("BeginDrawing");
    end_drawing: fn = c_import!("EndDrawing");

    Color: struct = {
        r: u8, g: u8, b: u8, a: u8,
        white: fn -> This = return Color{.r = 245, .g = 245, .b = 245, .a = 245};
        light_gray: fn -> This = return Color{.r = 200, .g = 200, .b = 200, .a = 255};
    }

    draw_text: fn(text: &str, posx: i32, posy: i32, fontsz: i32, color: Color) = {
        dtxt_i: fn(text: ptr, px: i32, py: i32, font: i32, color: Color)
            = c_import!("DrawText");
        dtxt_i(text.c_str(), posx, posy, fontsz, color);
    }
    clear_background: fn(color: Color) = c_import!("ClearBackground");
}

is_key_pressed: fn(key: rl::Key) -> bool = c_import!("IsKeyPressed");

main: fn = {
    wd := rl::Window::init(1280, 720, &"Game");
    ad := rl::AudioDevice::init();
    fx_wav := rl::Sound::load(&"resource/sound.wav");
    fx_ogg := rl::Sound::load(&"resource/sound.ogg");
    rl::set_target_fps(60);
    while(!wd.should_close()) {
        if(rl::Key::Space.is_key_pressed()) fx_wav.play();
        if(rl::Key::Enter.is_key_pressed()) fx_ogg.play();

        rl::begin_drawing();

        rl::clear_background(rl::Color::white());
        "Press SPACE to play the WAV sound".rl::draw_text(200, 180, 40, rl::Color::light_gray());
        "Press ENTER to play the OGG sound".rl::draw_text(200, 220, 40, rl::Color::light_gray());
        
        rl::end_drawing();
    }
}
