to_str: macro (expr: TupleExpr) = {
    final_expr := StrLit::new();
    for (child in 0..expr.child_size()) {
        final_expr.push_expr(expr.extract_child_at(0));
        final_expr.push_str(" ");
    }
    return final_expr;
}

comptime_fibonacci: macro (expr: IntLit) = {
    value := expr.value();
    fib_seq := ||(val: int) {
        if(val < 2) return val;
        return this(val - 1) + this(val - 2);
    };
    expr.set_value(fib_seq(value));
    return expr;
}
FIB_10: const i32 = comptime_fibonacci! 10;
main: fn = {
    test::print(&"${FIB_10}");
}
