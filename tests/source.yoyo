app: module = APP
Ostream: struct = {
    buffer: str,
    add: fn (&mut this, data: str) -> &mut This = {
        Lol: struct = {

        }
        this.buffer = "${this.buffer}${data}";
        return this;
    }
    call: fn (&mut this, func: called (v: &mut Ostream)) = {
        func.invoke(this);
    }
}
operator: <<(o: &mut Ostream, rhs: str) -> &mut Ostream
    = return o.add(rhs);
operator: <<(o: &mut Ostream, rhs: i32) -> &mut Ostream
    = return o.add("${rhs}");
operator: <<(o: &mut Ostream, rhs: called (c: &mut Ostream)) = o.call(rhs);
endline: fn (v: &mut Ostream) = app::func(&v.buffer);
main: fn = {
    cout: mut = Ostream::add::Lol::Ostream{.buffer = ""};
    endl := ||(v: &mut Ostream) v.endline();;
    a: i32 = 10;
    &mut 
    cout << "Actually " << "Cursed " << a + 20 << endl;
}
