Node: struct = {
    value: i32,
    next: Node^?
}

List: class = {
    first: Node^?
}

iter: default fw_iterator::<&i32> for List = {
    current_node: Node^?
    //container is a special value holding either a ref or const ref to the container object
    //ref for iterator_mut and const ref for iterator
    new: () -> This = return This {.current_node = container.first};
    is_end: (this) -> bool = return this.current_node is None;
    value: (this) -> cref i32 = return this.current_node.value; //skipped the optional cuz ive not decided optional semantics
    advance: (this: inout) = this.current_node = this.current_node.next;
}

num_digits: (x: u32) -> u32 = {...};
nth_digit: (x: u32, n: u32) -> u32 = {...};
digits: ra_iterator::<u32> for u32 = {
    index: u32,

    new: () -> This = return This {.index = 0};
    size: () -> usize = return num_digits(container);
    value: (this) -> u32 = return nth_digit(container, index);
    seek: (this: inout, idx: usize) = this.index = idx;
}

main: () = {
    list: List = /* make a list somehow */;
    for (elem in list) std::print("${elem}");
    for (digit in 10245.digits()) std::print("${digit}");
}