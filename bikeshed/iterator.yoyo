Node: struct::<T> = {
    value: T,
    next: (^mut Node::<T>)?
}

List: class::<T> = {
    first: (^mut Node::<T>)?
    iter: fn (&this) -> ListIter::<T> = return ListIter::<T>::new(this.first.value());
    iter_mut: fn (&mut this) -> ListIterMut = return ListIterMut::<T>::new(this.first.value());
    from_array: fn (arr: mut [T]) -> This = {
        list: This = This{ .first = null };
        if (arr.size() >= 1) {
            list.first = new Node::<T>{ .value = arr.extract(0), .next = null }
        }
        current: ^mut Node::<T> = list.first.value();
        while (arr.size()) {
            next := new Node::<T>{ .value = arr.extract(0), .next = null };
            current.next = next;
            current = next;
        }
        return list;
    }
}

ListIter: struct::<T> impl Iterator = {
    node: ^Node::<T>
    new: fn (node: ^Node::<T>) -> This = return This{ node };

    Iterator {
        ElementTy: alias = &T;
        is_end: fn (&this) -> bool = return this.node.next.has_value();
        advance: fn (&mut this) = if (this.node.next) this.node = *this.node.next.value();
        value: fn -> ElementTy = return &node.value;
    }
}
ListIterMut: struct::<T> impl Iterator = {
    node: ^mut Node::<T>
    new: fn (node: ^mut Node::<T>) -> This = return This{ node };
    Iterator {
        ElementTy: alias = &mut T;
        is_end: fn (&this) -> bool = return this.node.next.has_value();
        advance: fn (&mut this) = if (this.node.next) this.node = *this.node.next.value();
        value: fn -> ElementTy = return &node.value;
    }
}
//prints 10 20 30 40 50 110 120 130 140 150 on different lines
main: fn = {
    list := List::<i32>::from_array([10, 20, 30, 40, 50]);
    print_list: stored = ||(list: &List) for (elem in list.iter()) std::println("${*elem}");
    print_list(&list);
    for (elem in iter_mut) {
        *elem = *elem + 100;
    }
    print_list(&list);
}